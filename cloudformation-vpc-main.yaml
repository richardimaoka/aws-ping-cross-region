AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  AWSAccountId: 
    Description: The AWS Account Id for the main VPC
    Type: String

Mappings:
  RegionMap:
    eu-north-1:
      RegionSubnet: 10.101
    ap-south-1:
      RegionSubnet: 10.102
    eu-west-3:
      RegionSubnet: 10.103
    eu-west-2:
      RegionSubnet: 10.104
    eu-west-1:
      RegionSubnet: 10.105
    ap-northeast-2:
      RegionSubnet: 10.106
    ap-northeast-1:
      RegionSubnet: 10.107
    sa-east-1:
      RegionSubnet: 10.108
    ca-central-1:
      RegionSubnet: 10.109
    ap-southeast-1:
      RegionSubnet: 10.110
    ap-southeast-2:
      RegionSubnet: 10.111
    eu-central-1:
      RegionSubnet: 10.112
    us-east-1:
      RegionSubnet: 10.113
    us-east-2:
      RegionSubnet: 10.114
    us-west-1:
      RegionSubnet: 10.115
    us-west-2:
      RegionSubnet: 10.116

Resources:
  # Define VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      # e.g. 10.101.0.0/16, where up to the second octet is replaced by mapping
      CidrBlock: 
        !Sub
          - "${RegionSubnet}.0.0/16"
          - { RegionSubnet: !FindInMap [RegionMap, Ref: "AWS::Region", RegionSubnet] }            
      Tags:
        - Key: Name
          Value: aws-ping-vpc-cross-region

  # Needed for VPC peering
  PeerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Principal:
              AWS: !Ref AWSAccountId
            Action:
              - 'sts:AssumeRole'
            Effect: Allow
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'ec2:AcceptVpcPeeringConnection'
                Resource: '*'

  # Resources for SSM
  # https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-cf.html#automation-cf-create
  RoleSSM:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ssm.amazonaws.com
            - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
      Path: "/"
  InstanceProfileSSM:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref RoleSSM
  
  # Define Subnet
  SubnetInAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      # e.g. 10.101.0.0/24, where up to the second octet is replaced by Mapping defined earlier in this cloudformation.yaml
      CidrBlock: 
        !Sub
          - "${RegionSubnet}.0.0/24"
          - { RegionSubnet: !FindInMap [RegionMap, Ref: "AWS::Region", RegionSubnet] }            
      AvailabilityZone: 
        Fn::Select:
          - 0
          - !GetAZs {Ref: "AWS::Region"}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-az-1

  # Define Internet Gateway and the attachment to VPC          
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: aws-ping-internet-gateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC


  # Define Route Table, its Route, and associate the Route Table with the Subnet
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: aws-ping-route-table
  RouteInternetGateway:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable      
  SubnetInAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetInAZ1

  # Define Security Group and its inbound rules (= ingress).
  # The outbound (egress) rules are automatically set as "Allow All".
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: aws-ping-security-group
      GroupDescription: security group allowing SSH and ICMP
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-security-group
  SecurityGropuIngressInternal:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref SecurityGroup
  SecurityGropuIngressSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref SSHLocation
  SecurityGropuIngressICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: !Ref SSHLocation
  # Accept ICMP requests from VPC Peering of **ALL** the regions.
  # This is too wide open, but for an experimental purpose, that's probably OK.
  # Do this at your own risk!!
  SecurityGropuIngressVPCPeeringICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: 10.0.0.0/8

 
Outputs:
  VPCId:
    Description: VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCId"
  PeerRoleArn:
    Value: !GetAtt 
      - PeerRole
      - Arn
    Export:
      Name: !Sub "${AWS::StackName}-PeerRoleArn"      
  VPCCidrBlock:
    Value: !GetAtt 
      - VPC
      - CidrBlock
    Export:
      Name: !Sub "${AWS::StackName}-VPCCidrBlock"      
  RouteTable:
    Value: !Ref RouteTable
    Export:
      Name: !Sub "${AWS::StackName}-RouteTable"
  SecurityGroup:
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroup"
  Subnet:
    Value: !Ref SubnetInAZ1
    Export:
      Name: !Sub "${AWS::StackName}-Subnet"
  SubnetCidrFirstTwoOctets:
    Value:
      !Sub
      - "${RegionSubnet}.0"
      - { RegionSubnet: !FindInMap [RegionMap, Ref: "AWS::Region", RegionSubnet] }            
    Export:
      Name: !Sub "${AWS::StackName}-Subnet-Cidr-First-Two-Octets"
